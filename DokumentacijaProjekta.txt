                          DOKUMENTACIJA PROJEKTA
-------------------------------------------------------------------------
1|Planiranje projekta
Korisnik može naručiti novu narudžbu lijeka koristeći funkcionalnosti Sistema za upravljanje ljekarnama.

Da bi to učinio, korisnik mora dostaviti broj narudžbe, naziv, datum, broj lijeka i izbor lijeka. Unošenjem broja narudžbe korisnik može obrisati najnoviju narudžbu lijeka.

On ili ona moraju unijeti svaki zapis o prodaji u prikaz liste kako bi promijenili aranžman. Plaćanje se vrši iz područja prijema nakon preuzimanja narudžbi. Sistem od vas traži broj računa u području računa. Sistem tada prikazuje cijeli račun, koji uključuje vrstu lijeka, naziv, količinu i ukupnu cijenu.

2|Uvoz biblioteka
Prvi korak je da odredimo koje su C++ biblioteke potrebne za pokretanje našeg programa. Ovo će biti na početku prezentacije.

Šta je C++ biblioteka?
C++ biblioteka sadrži kod koji se može koristiti u različitim projektima. Biblioteka obično sadrži metode i klase koje se bave generičkom procedurom koju će mnogi programeri vjerovatno koristiti. C++, na primjer, uključuje biblioteke za obradu ulaza i izlaza, što je uobičajen zadatak u mnogim programima.

U sažetku
Konačna karakteristika projekta je mogućnost da se ispita sažetak ukupne prodaje. U prikazu liste, ovaj dio prikazuje svaki zapis o prodaji. Podaci se trajno pohranjuju u sistemu bez upotrebe bilo kakvih vanjskih datoteka.
-------------------------------------------------------------------------

              PRAĆENJE IZMJENA NA ORIGINALNOJ VERZIJI KODA
-------------------------------------------------------------------------
>> Prva izmjena na originalnoj verziji koda:
Ovaj dio koda predstavlja osnovnu strukturu programa za vođenje apoteke. Detaljno objašnjenje onoga što smo uradili do sada, cilja koda i plana za nastavak bi bilo >>

Uključili smo potrebne biblioteke:

#include <_______>...

iostream: omogućava unos i ispis podataka s konzole.
stdlib.h: omogućava korištenje funkcije system() za manipulaciju operativnim sistemom.
string: omogućava rad s nizovima znakova (stringovima).
cctype: omogućava rad s karakterima, poput provjere je li karakter slovo.
cmath: omogućava korištenje matematičkih funkcija poput sqrt(), sin(), cos(), itd.
cstdio: omogućava ulazno-izlazne operacije.
fstream: omogućava rad s datotekama, odnosno ulazno-izlazne operacije s datotekama.
iomanip: omogućava formatiranje ispisa.

Definirali smo simbol max kao 10, što predstavlja maksimalni broj elemenata u nizu.

Deklarirali smo klasu MedType koja će sadržavati funkcionalnosti za upravljanje narudžbama lijekova:

void _______();...

order(): metoda za unos nove narudžbe lijeka.
delete_item(): metoda za brisanje posljednje narudžbe lijeka.
update_order(): metoda za izmjenu liste narudžbi.
order_list(): metoda za ispisivanje liste narudžbi.
summary(): metoda za dnevni pregled ukupne prodaje.
quit(): metoda za izlaz iz programa.

Implementirali smo konstruktor klase MedType, ali u ovom trenutku nema specifične funkcionalnosti.

U funkciji main():

Postavili smo boju konzole na crnu pozadinu i bijeli tekst pomoću system("COLOR 5'").
Kreirali smo objekt medicine klase MedType.
Deklarirali smo varijablu menu koja će čuvati korisnikov izbor.

U petlji do-while:

Očistili smo ekran konzole pomoću system("cls").
Ispisali smo naziv programa i linije razdjeljivača za estetski izgled.
Ispisali smo izbornik opcija koje korisnik može odabrati.

Zatražili smo unos korisnikovog izbora i spremili ga u varijablu menu.

Trenutno, nemamo implementiranu logiku za obradu izbora korisnika. Sljedeći korak je dodati tu logiku, što podrazumijeva pozivanje odgovarajućih metoda iz klase MedType ovisno o izboru korisnika.

Nastavak rada će se fokusirati na implementaciju logike za svaku opciju izbornika. To će uključivati implementaciju metoda klase MedType za unos nove narudžbe, brisanje narudžbe, izmjenu liste narudžbi, ispisivanje liste narudžbi, pregled ukupne prodaje te izlaz iz programa.

>> Druga izmjena na originalnoj verziji koda:
U ovom dijelu koda >> switch (menu).. koristi se kontrolna struktura switch-case kako bi se odabrala odgovarajuća akcija na temelju unosa korisnika (menu). Svaki slučaj ima svoju specifičnu akciju koja se izvršava pozivom odgovarajuće metode objekta medicine. U slučaju nepostojećeg izbora ispisuje se poruka o neispravnom unosu. Nakon toga se petlja ponavlja sve dok se ne odabere opcija za izlaz iz programa (menu == 6). Nakon izlaska iz petlje, ispisuje se zahvalna poruka i program se zaustavlja.

>> Treća izmjena na originalnoj verziji koda:
U ovom dijelu koda >> struct node.. definiran je čvor node koji se koristi za čuvanje podataka o narudžbi lijeka. Struktura node sadrži različite podatkovne članove kao što su broj računa, ime kupca, datum narudžbe, količina lijeka, vrsta lijeka, ime lijeka, cijena lijeka, ukupan iznos narudžbe te pokazivače na prethodni, sljedeći i dodatni čvor.

Nakon toga, slijedi definicija klase MedType. U ovoj klasi se nalazi metoda order() koja se koristi za unos nove narudžbe lijeka. Unutar ove metode vrši se unos detalja narudžbe, poput broja računa, imena kupca, datuma i količine lijeka. Također se izračunava ukupan iznos narudžbe za svaki lijek. Nakon unosa, narudžba se sprema u listu kao novi čvor.

Nadalje, u klasi MedType nalaze se i druge metode kao što su delete_item(), update_order(), order_list(), summary() i quit(). Međutim, važno je napomenuti da ove metode su trenutno samo stubovi i nemaju stvarnu funkcionalnost. One su tu kako bi omogućile uspješnu kompilaciju projekta. Potrebno je implementirati odgovarajuće funkcionalnosti ovih metoda kako bi projekat pravilno funkcionisao.